# 1 üåû –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –µ–≥–æ –∫–∞—Ç–µ—Ç–æ–≤.


# def compute_hypotenuse(a, b):
#     c = (a**2 + b**2) ** 0.5
#     return c


# print(compute_hypotenuse(3, 4))
# print(compute_hypotenuse(5, 12))
# print(compute_hypotenuse(1, 1))

# OR

# x = int(input())
# y = int(input())

# hypotenuse = compute_hypotenuse(x, y)

# print(hypotenuse)

# üìå –í –º–æ–¥—É–ª–µ math –∏–º–µ–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è hypot(x, —É) –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏–Ω—É –≥–∏–ø–æ—Ç–µ–Ω—É–∑—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ —Å –∫–∞—Ç–µ—Ç–∞–º–∏ x –∏ y.


# def get_distance(x1, y1, x2, y2):
#     return compute_hypotenuse(x1 - x2, y1 - y2)


# x1, y1 = float(input()), float(input())  # —Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
# x2, y2 = float(input()), float(input())  # —Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏

# print(get_distance(x1, y1, x2, y2))  # –≤—ã—á–∏—Å–ª—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏

# import math

# def get_distance(x1, y1, x2, y2):
#     return math.hypot(x1 - x2, y1 - y2)

# # –°—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
# x1, y1 = float(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É x1: ")), float(
#     input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É y1: ")
# )

# # –°—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
# x2, y2 = float(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É x2: ")), float(
#     input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É y2: ")
# )

# # –í—ã—á–∏—Å–ª—è–µ–º –∏ –≤—ã–≤–æ–¥–∏–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
# print(f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏: {get_distance(x1, y1, x2, y2)}")
