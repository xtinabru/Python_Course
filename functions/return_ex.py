# Ex 1 üå∏

# def do_something(number):
#     return number * 2

# print(do_something(10)) # 20

# Ex 2 üå∏

# def do_something(numbers):
#     result = 1
#     for i in numbers:
#         result *= i
#     return result

# print(do_something([2, 2, 2, 2])) # 16

# Ex 3 üå∏

# def get_sum(x, y, z):
#     return x + y + z
#     print("–°—É–º–º–∞ —Ä–∞–≤–Ω–∞", x + y + z)


# print(get_sum(1, 2, 3)) # 6

# Ex 4 –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ üå∏

# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def convert_to_miles(km):
#     return km * 0.6214

# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# num = int(input())

# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
# result = convert_to_miles(num)
# print(f"{result:.4f}") if num == 1 else print(f"{result:.3f}")

# OR


# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def convert_to_miles(km):
#     ml = km * 0.6214
#     return ml

# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# num = int(input())

# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(convert_to_miles(num))


# Ex 5 –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π üå∏

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_days(month):
#     if month == 2:
#         return 28
#     elif month == 4 or month == 6 or month == 9 or month == 11:
#         return 30
#     else:
#         return 31


# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# num = int(input())

# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_days(num))


# Ex 6 –î–µ–ª–∏—Ç–µ–ª–∏ 1üå∏

# –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é get_factors(num), –ø—Ä–∏–Ω–∏–º–∞—é—â—É—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–µ–ª–∏—Ç–µ–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞


# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def get_factors(num):
#     factors = []
#     for i in range(1, num + 1):
#         if num % i == 0:
#             factors.append(i)
#     return factors


# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())

# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
# print(get_factors(n))


# Ex 7 –î–µ–ª–∏—Ç–µ–ª–∏ 2 üå∏

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def number_of_factors(num):
#     count = 0  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–µ–ª–∏—Ç–µ–ª–µ–π
#     for i in range(1, num + 1):
#         if num % i == 0:
#             count += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–ª–∏—Ç–µ–ª—å
#     return count  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–∏—Ç–µ–ª–µ–π

# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# n = int(input())

# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# print(number_of_factors(n))


# Ex 8  –ù–∞–π—Ç–∏ –≤—Å–µ—Ö üå∏

# –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def find_all(target, symbol):
#     cur = 0 # cur ‚Äî —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ target. –û–Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω—É–ª–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø–æ–∏—Å–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏.
#     res = [] # res ‚Äî —ç—Ç–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏–Ω–¥–µ–∫—Å–æ–≤, –≥–¥–µ —Å–∏–º–≤–æ–ª symbol –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–µ target.

#     for i in target:
#         if i == symbol:
#             res.append(cur)

#         cur += 1

#     return res


# Ex 9  Merge lists 1 üå∏


# # –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
# def merge(list1, list2):
#     # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±–∞ —Å–ø–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
#     return sorted(list1 + list2)


# # —Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
# numbers1 = [int(c) for c in input().split()]
# numbers2 = [int(c) for c in input().split()]

# # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–µ—á–∞—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# print(merge(numbers1, numbers2))
