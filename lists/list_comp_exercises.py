# 1 ü©∂
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å—Ç—Ä–æ–∫–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –≥–¥–µ —É –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ —É–¥–∞–ª—ë–Ω –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª.

# keywords = [
#     "False",
#     "True",
#     "None",
#     "and",
#     "with",
#     "as",
#     "assert",
#     "break",
#     "class",
#     "continue",
#     "def",
#     "del",
#     "elif",
#     "else",
#     "except",
#     "finally",
#     "try",
#     "for",
#     "from",
#     "global",
#     "if",
#     "import",
#     "in",
#     "is",
#     "lambda",
#     "nonlocal",
#     "not",
#     "or",
#     "pass",
#     "raise",
#     "return",
#     "while",
#     "yield",
# ]

# new_keywords = [m[1:] for m in keywords]

# print(new_keywords)

# first_letters_of_three_letter_words = [m[0] for m in words if len(m) == 3]
# print(first_letters_of_three_letter_words)


# 2 ü©∂
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —Ç–∞–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–ª–∏–Ω—ã —Å—Ç—Ä–æ–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.

# keywords = [
#     "False",
#     "True",
#     "None",
#     "and",
#     "with",
#     "as",
#     "assert",
#     "break",
#     "class",
#     "continue",
#     "def",
#     "del",
#     "elif",
#     "else",
#     "except",
#     "finally",
#     "try",
#     "for",
#     "from",
#     "global",
#     "if",
#     "import",
#     "in",
#     "is",
#     "lambda",
#     "nonlocal",
#     "not",
#     "or",
#     "pass",
#     "raise",
#     "return",
#     "while",
#     "yield",
# ]

# lengths = [len(m) for m in keywords]

# print(lengths)

# 3 ü©∂
# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥ —Å–ø–∏—Å–æ—á–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π –Ω–µ –º–µ–Ω–µ–µ –ø—è—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).

# keywords = [
#     "False",
#     "True",
#     "None",
#     "and",
#     "with",
#     "as",
#     "assert",
#     "break",
#     "class",
#     "continue",
#     "def",
#     "del",
#     "elif",
#     "else",
#     "except",
#     "finally",
#     "try",
#     "for",
#     "from",
#     "global",
#     "if",
#     "import",
#     "in",
#     "is",
#     "lambda",
#     "nonlocal",
#     "not",
#     "or",
#     "pass",
#     "raise",
#     "return",
#     "while",
#     "yield",
# ]

# new_keywords = [(m) for m in keywords if len(m) >= 5]

# print(new_keywords)

# 4 ü©∂

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, —Ç–∞–∫ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∏—Å–µ–ª-–ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–≤ –æ—Ç 100 –¥–æ 1000 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ).

# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ. –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª.

# palindromes = [i for i in range(100, 1000) if str(i) == str(i)[::-1]]

# print(palindromes)

# 5 ü©∂
# –°–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ 1

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–≤–∞–¥—Ä–∞—Ç—ã —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ), –∞ –∑–∞—Ç–µ–º –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ, —Ç–æ –µ—Å—Ç—å –∫–∞–∂–¥—ã–π –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

# squares_of_numbers = [i**2 for i in range(1, int(input()) + 1)]

# squares_as_string = "\n".join([str(num) for num in squares_of_numbers])

# print(squares_as_string)

# or

# n = int(input())
# squares = [el ** 2 for el in range(1, n + 1)]

# for el in squares:
#     print(el)

# 6 ü©∂
# –°–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ 2

# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–µ–¥–µ—Ç –∫—É–±—ã —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —Ç–∞–∫–∂–µ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.


# cubes = [int(el) ** 3 for el in input().split()]  # —Ç—É—Ç —Å–ø–∏—Å–æ–∫
# cubes_str = " ".join(str(cube) for cube in cubes)

# print(cubes_str)

# 7 ü©∂
# –í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É 1
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–ª–æ–≤–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç —Å–ª–æ–≤–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫.

# words = [word for word in input().split()]
# words_string = "\n".join(str(w) for w in words)

# print(words_string)

# 8 ü©∂
# –í –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É 2
# –ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—é—â—É—é —Å–ø–∏—Å–æ—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.

# import re

# text = input()

# numbers = re.findall(r"\d+\d*", text)

# result = "".join(numbers)

# print(result)

# ORRR

# digits = [el for el in input() if el.isdigit()]
# print(*digits, sep="")
